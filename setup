#!/bin/sh

# helper functions                                   
printOut() {
  echo "$(tput bold)=>$(tput sgr0) $1"
}

getVersion() {
  echo "version: 0.1"
  exit 0
}


# help menu                                          
if [ "$*" == "--help" ] || [ "$*" == "-h" ]
then
  echo "This script installs common config files for zsh, tmux, nvim by default. Optionally, this setup script will also install additional useful packages and plugins.\n"
  echo "Usage: setup [--version|-v] [-h|--help] [--purge] [-t] [--all] [--min] [--git] [-zsh] [-itrm] [-llvm] [-tmx]"
  echo "options:"
  echo "--version,-v    prints the script version"
  echo "-h, --help      print this help menu."
  echo "--purge         purges all backup files create by the script"
  echo "-t              disables system mouse acceleration and increases dock speed"
  echo "--all           installs $(tput bold)all$(tput sgr0) optional features"
  echo "--min           installs core-features only"
  echo "--git           sets up git shotcuts and credentials"
  echo "-zsh            installs zsh features"
  echo "-itrm           installs iterm features"
  echo "-llvm           installs llvm features (needed for coc.vim)"
  echo "-tmx            installs tmux features"
  exit 0
fi

# check for version flag
if [ "$*" == "--version" ] || [ "$*" == "-v" ]
then
  getVersion
fi

# check for purge flag
if [ "$*" == "--purge" ]
then
  printOut "Purging backup files..."
  rm -f ~/.zshrc.bac ~/.tmux.conf.bac ~/.config/nvim/init.vim.bac
  printOut "Done"
  exit 0
fi

printOut "Beginning setup...\n"
printOut "Searching for pre-existing config files...\n"

# create backups and add configs                     
FILE=~/.zshrc
if test -f "$FILE"; then
    printOut "Found zshrc at $FILE, backing up to $FILE.bac"
    cp ~/.zshrc ~/.zshrc.bac
fi
FILE=~/.tmux.conf
if test -f "$FILE"; then
    printOut "Found tmux config at $FILE, backing up to $FILE.bac"
    cp ~/.tmux.conf ~/.tmux.conf.bac
fi


FILE=~/.config/nvim/init.vim
if test -f "$FILE"; then
    printOut "Found nvim config at $FILE, backing up to $FILE.bac"
    cp ~/.config/nvim/init.vim ~/.config/nvim/init.vim.bac 
fi

printOut "Backups completed\n"
printOut "Creating new source files...\n"

# create new source files
echo "source ~/config/zsh/zshrc" > ~/.zshrc && printOut "Created .zshrc"
# make sure autoload dir exists
[ -d ~/.config/nvim/autoload ] || mkdir -p ~/.config/nvim/autoload
echo "source ~/config/nvim/init.vim" > ~/.config/nvim/init.vim && printOut "Created .vimrc"
echo "source ~/config/tmux/tmux.conf" > ~/.tmux.conf && printOut "Created tmux.conf\n"

# install vim plugins                                 

# ctrlp
printOut "Installing ctrlp.vim..."
git clone https://github.com/ctrlpvim/ctrlp.vim.git ~/.config/ctrlp/ctrlp.vim

# coc
[ -d ~/.config/nvim/plug-config ] || mkdir -p ~/.config/nvim/plug-config
mkdir -p ~/.config/nvim/plug-config
touch ~/.config/nvim/plug-config/coc.vim

# exit program if min flag provided
if [ "$*" == "-min" ] 
then
  printOut "Done"
  exit 0
fi

# add zsh functionality                               
if [ "$*" == "-zsh" ] || [ "$*" == "--all" ]
then
  printOut "Installing zsh..."
  brew install zsh
  printOut "Installing zsh syntax highighting..."
  brew install zsh-syntax-highlighting
fi

# add iterm files                                     
if [ "$*" == "-itrm" ] || [ "$*" == "--all" ]
then
  printOut "Installing iTerm2..."
  brew install --cask iterm2 && printOut "Done. Please import pre-existing iTerm config from ~/config/iTerm/term-config.json by opening the application and going to 'Preferences -> Profiles -> Other actions -> Import JSON Profile"
fi

# add tmux files                                      
if [ "$*" == "-tmx" ] || [ "$*" == "--all" ]
then
  printOut "Installing Tmux"
  brew install tmux
  printOut "Installing Tmux Plugin Manager"
  [ -d ~/.tmux/plugins ] || mkdir -p ~/.tmux/plugins 
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  printOut "Done"
fi

# install llvm (needed for coc.vim)                     
if [ "$*" == "-llvm" ] || [ "$*" == "--all" ]
then
  printOut " Installing llvm..."
  brew install llvm
  printOut "Done"
fi

# install pass                                          
if [ "$*" == "-pass" ]
then
  # pass
  printOut "Installing pass..."
  brew install pass 
  printOut "Installed pass"
  echo "Please enter the directory of your public gpg key"
  read gpgPub
  echo "Please enter the directory of your private gpg key"
  read gpgPriv
  printOut "Importing gpg keys..."
  gpg --import gpgPub
  gpg --import gpgPriv
  gpg --list-keys
  echo "Please enter the fingerprint of your gpg key (last column of 'pub' row)"
  read fingerprint
  printOut "Initializing pass storage"
  pass init $fingerprint
  echo "Please enter the repository link to your pass storage"
  read $repolink
  git clone $repolink passStorageTemp
  mv passStorageTemp ~/.pass_store
  # browserpass extension
  printOut "Installing browserpass extension..."
  brew install pinentry-mac
  brew tap amar1729/formulae
  brew install browserpass
  printOut "Installing native messaging hosts, requesting sudo..."
  sudo PREFIX=/usr/local make hosts-chrome -C /usr/local/lib/browserpass
  echo "pinenty-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
  gpgconf --kill gpg-agent
  printOut "Installed browserpass extension..."
fi

# add git functionality                               
if [ "$*" == "-git" ] || [ "$*" == "--all" ]
then
  printOut "Adding git shortcuts..."
  git config --global alias.s status
  git config --global alias.br branch
  git config --global alias.co checkout
  git config --global alias.cm commit
  echo "Please enter your git username:"
  read gitusername
  echo "Please enter your git email:"
  read gitemail
  printOut "Setting git credentials..."
  git config --global user.name $gitusername
  git config --global user.name $gitemail
fi

if [ "$*" == "-t" ] 
then
  defaults write com.apple.dock autohide-time-modifier -float 0.1 && killall Dock
  defaults write .GlobalPreferences com.apple.mouse.scaling -1
fi

printOut "Done"
exit 0
